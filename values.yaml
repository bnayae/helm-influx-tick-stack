# Default values for influx-tick-stack.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

## InfluxDB
influxdb:
  ## influxdb image version
  ## ref: https://hub.docker.com/r/library/influxdb/tags/
  ## ref: https://quay.io/repository/influxdb/influxdb?tag=latest&tab=tags
  image:
    repo: "quay.io/influxdb/influxdb"
    #repository: "quay.io/influxdb/influxdb"
    tag: "nightly-alpine"
    pullPolicy: Always
    # repo: "influxdb"
    # tag: "1.6.4-alpine"
    # pullPolicy: IfNotPresent
  
  ## Specify a service type
  ## NodePort is default
  ## ref: http://kubernetes.io/docs/user-guide/services/
  ##
  service:
    ## Add annotations to service
    # annotations: {}
    type: ClusterIP
    ## Add IP Cluster
    # clusterIP: ""
    ## Add external IPs that route to one or more cluster nodes
    # externalIPs: []
    ## Specify LoadBalancer IP (only allow on some cloud provider)
    # loadBalancerIP: ""
    ## Allow source IPs to access on service (if empty, any access allow)
    # loadBalancerSourceRanges: []
  
  ## Persist data to a persistent volume
  ##
  persistence:
    enabled: false
    ## If true will use an existing PVC instead of creating one
    # useExisting: false
    ## Name of existing PVC to be used in the influx deployment
    # name:
    ## influxdb data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    accessMode: ReadWriteOnce
    size: 8Gi
  
  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  resources:
    requests:
      memory: 256Mi
      cpu: 0.1
    limits:
      memory: 16Gi
      cpu: 8
  
  ingress:
    enabled: false
    tls: false
    # secretName: my-tls-cert # only needed if tls above is true
    hostname: tick.influxdb.com
    annotations:
      # kubernetes.io/ingress.class: "nginx"
      # kubernetes.io/tls-acme: "true"
  
  ## Use an alternate scheduler, e.g. "stork".
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  # schedulerName:
  
  ## Node labels for pod assignment
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}
  
  ## Tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []

  ## Affinity for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}

  ## The InfluxDB image uses several environment variables to automatically
  ## configure certain parts of the server.
  ## Ref: https://hub.docker.com/_/influxdb/
  env:
    # - name: INFLUXDB_DB
    #   value: "demo"
  
  ## Change InfluxDB configuration parameters below:
  ## Defaults are indicated
  ## ref: https://docs.influxdata.com/influxdb/v1.1/administration/config/
  config:
    reporting_disabled: false
    bind_address: 8088
    storage_directory: /var/lib/influxdb
    meta:
      retention_autocreate: true
      logging_enabled: true
    data:
      query_log_enabled: true
      cache_max_memory_size: 1073741824
      cache_snapshot_memory_size: 26214400
      cache_snapshot_write_cold_duration: 10m0s
      compact_full_write_cold_duration: 4h0m0s
      max_series_per_database: 1000000
      max_values_per_tag: 100000
      trace_logging_enabled: false
    coordinator:
      write_timeout: 10s
      max_concurrent_queries: 0
      query_timeout: 0s
      log_queries_after: 0s
      max_select_point: 0
      max_select_series: 0
      max_select_buckets: 0
    retention:
      enabled: true
      check_interval: 30m0s
    shard_precreation:
      enabled: true
      check_interval: 10m0s
      advance_period: 30m0s
    admin:
      enabled: false
      bind_address: 8083
      https_enabled: false
      https_certificate: /etc/ssl/influxdb.pem
    monitor:
      store_enabled: true
      store_database: _internal
      store_interval: 10s
    subscriber:
      enabled: true
      http_timeout: 30s
      insecure_skip_verify: false
      ca_certs: ""
      write_concurrency: 40
      write_buffer_size: 1000
    http:
      enabled: true
      bind_address: 8086
      auth_enabled: false
      log_enabled: true
      write_tracing: false
      pprof_enabled: true
      https_enabled: false
      https_certificate: /etc/ssl/influxdb.pem
      https_private_key: ""
      max_row_limit: 10000
      max_connection_limit: 0
      shared_secret: "beetlejuicebeetlejuicebeetlejuice"
      realm: InfluxDB
      unix_socket_enabled: false
      bind_socket: /var/run/influxdb.sock
    graphite:
      enabled: false
      bind_address: 2003
      database: graphite
      retention_policy: autogen
      protocol: tcp
      batch_size: 5000
      batch_pending: 10
      batch_timeout: 1s
      consistency_level: one
      separator: .
      udp_read_buffer: 0
      # Uncomment to define graphite templates
      # templates:
      #   - "graphite.metric.*.*.* measurement.run"
    collectd:
      enabled: false
      bind_address: 25826
      database: collectd
      retention_policy: autogen
      batch_size: 5000
      batch_pending: 10
      batch_timeout: 10s
      read_buffer: 0
      typesdb: /usr/share/collectd/types.db
      security_level: none
      auth_file: /etc/collectd/auth_file
    opentsdb:
      enabled: false
      bind_address: 4242
      database: opentsdb
      retention_policy: autogen
      consistency_level: one
      tls_enabled: false
      certificate: /etc/ssl/influxdb.pem
      batch_size: 1000
      batch_pending: 5
      batch_timeout: 1s
      log_point_errors: true
    udp:
      enabled: true
      bind_address: 8089
      database: udp
      retention_policy: autogen
      batch_size: 5000
      batch_pending: 10
      read_buffer: 0
      batch_timeout: 1s
      precision: "ns"
    continuous_queries:
      log_enabled: true
      enabled: true
      run_interval: 1s
  
############################################################################################

## Chronograf 
chronograf:
  ## Image Settings
  ## ref: https://quay.io/repository/influxdb/chronograf?tab=tags
  ## ref: https://hub.docker.com/r/library/chronograf/tags/
  image:
    repository: "quay.io/influxdb/chronograf"
    tag: "nightly"
    pullPolicy: "Always"
    # repository: "docker.io/chronograf"
    # tag: "1.6.2-alpine"
    # pullPolicy: "IfNotPresent"

  ## Specify a service type
  ## ClusterIP is default
  ## ref: http://kubernetes.io/docs/user-guide/services/
  ##
  service:
    replicas: 1
    type: LoadBalancer

  ## Persist data to a persistent volume
  ##
  persistence:
    enabled: false
    ## chronograf data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    accessMode: ReadWriteOnce
    size: 8Gi
  
  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    requests:
      memory: 256Mi
      cpu: 0.1
    limits:
      memory: 2Gi
      cpu: 2

  ## Node labels for pod assignment
  ## ref: https://kubernetes.io/docs/user-guide/node-selection/
  #
  nodeSelector: {}
  
  ## Tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  
  ## Affinity for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}
  
  ## Configure the ingress object to hook into existing infastructure
  ## ref : http://kubernetes.io/docs/user-guide/ingress/
  ## OPTIONALLY you can set .Values.ingress.secretName to set which secret to use
  ##
  ingress:
    enabled: true
    tls: false
    hostname: tick.chronograf.com
    annotations:
      # kubernetes.io/ingress.class: "nginx"
      # secretName: my-tls-cert
      # kubernetes.io/tls-acme: "true"
  
  ## OAuth Settings for OAuth Providers
  ## More information -> https://github.com/influxdata/chronograf/blob/master/docs/auth.md
  ##
  oauth:
    # Need to set to true to use any of the oauth options
    enabled: false
    # Used for JWT to support running multiple copies of Chronograf
    # token_secret: CHANGE_ME
    github:
      enabled: false
      # client_id: CHANGE_ME
      # client_secret: CHANGE_ME
      # This is a comma separated list of GH organizations (OPTIONAL)
      gh_orgs: ""
    google:
      enabled: false
      # client_id: CHANGE_ME
      # client_secret: CHANGE_ME
      # eg. http://tick.chronograf.com
      public_url: ""
      # This is a comma separated list of Google Apps domains (OPTIONAL)
      google_domains: ""
    heroku:
      enabled: false
      # client_id: CHANGE_ME
      # client_secret: CHANGE_ME
      # This is a comma separated list of Heroku organizations (OPTIONAL)
      he_orgs: ""

############################################################################################

## Kapacitor
kapacitor:
  ## influxdb image version
  ## ref: https://hub.docker.com/r/library/influxdb/tags/
  ##
  image:
    repository: "docker.io/kapacitor"
    tag: "1.5.1-alpine"
    pullPolicy: "IfNotPresent"
  
  ## Specify a service type, defaults to NodePort
  ## ref: http://kubernetes.io/docs/user-guide/services/
  ##
  service:
    type: ClusterIP
  
  ## Persist data to a persistent volume
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    enabled: false
    ## kapacitor data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    accessMode: ReadWriteOnce
    size: 8Gi
    # existingClaim: ""
  
  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    requests:
      memory: 256Mi
      cpu: 0.1
    limits:
      memory: 2Gi
      cpu: 2
  
  ## Set the environment variables for kapacitor (or anything else you want to use)
  ## ref: https://hub.docker.com/_/kapacitor/
  ##
  # Examples below
  #
  # envVars:
  #   KAPACITOR_SLACK_ENABLED: true
  #   KAPACITOR_SLACK_URL: "http://slack.com/xxxxx/xxxxx/xxxx/xxxxxxx"
  #
  # or, at your terminal, with
  #
  # helm install --name kapacitor-rls --set influxURL=http://influxurl.com,envVars.KAPACITOR_SLACK_ENABLED=true,envVars.KAPACITOR_SLACK_URL="http://slack.com/xxxxx/xxxxx/xxxx/xxxxxxx" stable/kapacitor

  ## Node labels for pod assignment
  ## ref: https://kubernetes.io/docs/user-guide/node-selection/
  #
  nodeSelector: {}
  
  ## Tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: []
  
  ## Affinity for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}
  
  ## Set the URL of InfluxDB instance to create subscription on
  ## ref: https://docs.influxdata.com/kapacitor/v1.5/introduction/getting_started/
  ##
  # influxURL: http://{{ influx-tick-stack.name }}-influxdb.tick:8086
  influxURL: http://influx-influxdb.tick:8086

############################################################################################

## Telegraf     
telegraf:
  ## Default values.yaml for Telegraf
  ## This is a YAML-formatted file.
  ## ref: https://hub.docker.com/r/library/telegraf/tags/
  image:
    repo: "telegraf"
    tag: "1.8.3-alpine"
    pullPolicy: IfNotPresent
  ## Configure the telegraf daemonset here.
  ## Resource limits and outputs can be set separately
  daemonset:
    enabled: true
    ## Configure resource requests and limits
    ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
    resources:
      requests:
        memory: 256Mi
        cpu: 0.1
      limits:
        memory: 2Gi
        cpu: 1
    ## Exposed telegraf configuration
    ## ref: https://docs.influxdata.com/telegraf/v1.1/administration/configuration/
    config:
  ##    global_tags:
  ##      dc: "us-east-1"
  ##      user: "$USER"
      agent:
        interval: "10s"
        round_interval: true
        metric_batch_size: 1000
        metric_buffer_limit: 10000
        collection_jitter: "0s"
        flush_interval: "10s"
        flush_jitter: "0s"
        precision: ""
        debug: false
        quiet: false
        logfile: ""
        hostname: "$HOSTNAME"
        omit_hostname: false
      outputs:
        influxdb:
          urls: #[]
            - "http://influx-influxdb.tick:8086"
          database: "telegraf"
  ##        retention_policy: ""
  ##        write_consistency: "any"
  ##        timeout: "5s"
  ##        username: "telegraf"
  ##        password: "metricsmetricsmetricsmetrics"
  ##        user_agent: "telegraf"
  ##        udp_payload: 512
  ##        ssl_ca: "/etc/telegraf/ca.pem"
  ##        ssl_cert: "/etc/telegraf/cert.pem"
  ##        ssl_key: "/etc/telegraf/key.pem"
  ##        insecure_skip_verify: false
  ##      amqp:
  ##        url: "amqp://localhost:5672/influxdb"
  ##        exchange: "telegraf"
  ##        auth_method: "PLAIN"
  ##        routing_tag: "host"
  ##        retention_policy: "default"
  ##        database: "telegraf"
  ##        precision: "s"
  ##        ssl_ca: "/etc/telegraf/ca.pem"
  ##        ssl_cert: "/etc/telegraf/cert.pem"
  ##        ssl_key: "/etc/telegraf/key.pem"
  ##        insecure_skip_verify: false
  ##        data_format: "influx"
  ##      kafka:
  ##        brokers:
  ##          - "localhost:9092"
  ##        topic: "telegraf"
  ##        routing_tag: "host"
  ##        compression_codec: 0
  ##        required_acks: -1
  ##        max_retry: 3
  ##        ssl_ca: "/etc/telegraf/ca.pem"
  ##        ssl_cert: "/etc/telegraf/cert.pem"
  ##        ssl_key: "/etc/telegraf/key.pem"
  ##        insecure_skip_verify: false
  ##        data_format: "influx"
  ##      mqtt:
  ##        servers:
  ##          - "localhost:1883"
  ##        topic_prefix: "telegraf"
  ##        username: "telegraf"
  ##        password: "metricsmetricsmetricsmetrics"
  ##        ssl_ca: "/etc/telegraf/ca.pem"
  ##        ssl_cert: "/etc/telegraf/cert.pem"
  ##        ssl_key: "/etc/telegraf/key.pem"
  ##        insecure_skip_verify: false
  ##        data_format: "influx"
  ##      nats:
  ##        servers:
  ##          - "nats://localhost:4222"
  ##        username: ""
  ##        password: ""
  ##        subject: "telegraf"
  ##        ssl_ca: "/etc/telegraf/ca.pem"
  ##        ssl_cert: "/etc/telegraf/cert.pem"
  ##        ssl_key: "/etc/telegraf/key.pem"
  ##        insecure_skip_verify: false
  ##        data_format: "influx"
  ##      nsq:
  ##        server: "localhost:4150"
  ##        topic: "telegraf"
  ##        data_format: "influx"
      inputs:
        cpu:
          percpu: true
          totalcpu: true
          collect_cpu_time: false
        disk:
          ignore_fs:
            - "tmpfs"
            - "devtmpfs"
        diskio:
        docker:
          endpoint: "unix:///var/run/docker.sock"
          container_names: []
        kernel:
        mem:
        processes:
        swap:
        system:
        kubernetes:
          url: "http://$HOSTNAME:10255"
          bearer_token: "/var/run/secrets/kubernetes.io/serviceaccount/token"
          insecure_skip_verify: true
  ## Configure the telegraf single instance here.
  ## Resource limits and outputs can be set separately
  single:
    enabled: true
    ## Configure resource requests and limits
    ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
    resources:
      requests:
        memory: 256Mi
        cpu: 0.1
      limits:
        memory: 2Gi
        cpu: 1
    ## Configure the service for this telegraf instance. If you are running
    ## Any of the service plugins you will need this enabled
    ## Service Plugins: http_listener, statsd, tcp_listener, udp_listener
    ## ref: http://kubernetes.io/docs/user-guide/services/
    service:
      enabled: true
      type: ClusterIP
    ## Exposed telegraf configuration
    ## For full list of possible values see `/docs/all-config-values.yaml` and `/docs/all-config-values.toml`
    ## ref: https://docs.influxdata.com/telegraf/v1.1/administration/configuration/
    config:
  ##    global_tags:
  ##      dc: "us-east-1"
  ##      user: "$USER"
      agent:
        interval: "10s"
        round_interval: true
        metric_batch_size: 1000
        metric_buffer_limit: 10000
        collection_jitter: "0s"
        flush_interval: "10s"
        flush_jitter: "0s"
        precision: ""
        debug: false
        quiet: false
        logfile: ""
        hostname: "telegraf-polling-service"
        omit_hostname: false
      outputs:
        influxdb:
          urls: #[]
            - "http://influx-influxdb.tick:8086"
          database: "telegraf"
  ##        retention_policy: ""
  ##        write_consistency: "any"
  ##        timeout: "5s"
  ##        username: "telegraf"
  ##        password: "metricsmetricsmetricsmetrics"
  ##        user_agent: "telegraf"
  ##        udp_payload: 512
  ##        ssl_ca: "/etc/telegraf/ca.pem"
  ##        ssl_cert: "/etc/telegraf/cert.pem"
  ##        ssl_key: "/etc/telegraf/key.pem"
  ##        insecure_skip_verify: false
  ##      amqp:
  ##        url: "amqp://localhost:5672/influxdb"
  ##        exchange: "telegraf"
  ##        auth_method: "PLAIN"
  ##        routing_tag: "host"
  ##        retention_policy: "default"
  ##        database: "telegraf"
  ##        precision: "s"
  ##        ssl_ca: "/etc/telegraf/ca.pem"
  ##        ssl_cert: "/etc/telegraf/cert.pem"
  ##        ssl_key: "/etc/telegraf/key.pem"
  ##        insecure_skip_verify: false
  ##        data_format: "influx"
  ##      kafka:
  ##        brokers:
  ##          - "localhost:9092"
  ##        topic: "telegraf"
  ##        routing_tag: "host"
  ##        compression_codec: 0
  ##        required_acks: -1
  ##        max_retry: 3
  ##        ssl_ca: "/etc/telegraf/ca.pem"
  ##        ssl_cert: "/etc/telegraf/cert.pem"
  ##        ssl_key: "/etc/telegraf/key.pem"
  ##        insecure_skip_verify: false
  ##        data_format: "influx"
  ##      mqtt:
  ##        servers:
  ##          - "localhost:1883"
  ##        topic_prefix: "telegraf"
  ##        username: "telegraf"
  ##        password: "metricsmetricsmetricsmetrics"
  ##        ssl_ca: "/etc/telegraf/ca.pem"
  ##        ssl_cert: "/etc/telegraf/cert.pem"
  ##        ssl_key: "/etc/telegraf/key.pem"
  ##        insecure_skip_verify: false
  ##        data_format: "influx"
  ##      nats:
  ##        servers:
  ##          - "nats://localhost:4222"
  ##        username: ""
  ##        password: ""
  ##        subject: "telegraf"
  ##        ssl_ca: "/etc/telegraf/ca.pem"
  ##        ssl_cert: "/etc/telegraf/cert.pem"
  ##        ssl_key: "/etc/telegraf/key.pem"
  ##        insecure_skip_verify: false
  ##        data_format: "influx"
  ##      nsq:
  ##        server: "localhost:4150"
  ##        topic: "telegraf"
  ##        data_format: "influx"
      inputs:
        cpu:
          percpu: false
          totalcpu: true
        system:
  ##      aerospike:
  ##        servers:
  ##          - "localhost:3000"
  ##      apache:
  ##        urls:
  ##          - "http://localhost/server-status?auto"
  ##      cassandra:
  ##        context: "/jolokia/read"
  ##        servers:
  ##          - "myuser:mypassword@10.10.10.1:8778"
  ##          - "10.10.10.2:8778"
  ##          - ":8778"
  ##        metrics :
  ##          - "/java.lang:type=Memory/HeapMemoryUsage"
  ##          - "/org.apache.cassandra.metrics:type=Table,keyspace=*,scope=*,name=ReadLatency"
  ##      cloudwatch:
  ##        region: "us-east-1"
  ##        access_key: ""
  ##        secret_key: ""
  ##        token: ""
  ##        role_arn: ""
  ##        profile: ""
  ##        shared_credential_file: ""
  ##        period: "5m"
  ##        delay: "5m"
  ##        interval: "5m"
  ##        cache_ttl: "10m"
  ##        namespace: "AWS/ELB"
  ##        ratelimit: 10
  ##        metrics:
  ##         names:
  ##          - "Latency"
  ##          - "RequestCount"
  ##         dimensions:
  ##           name: "LoadBalancerName"
  ##           value: "p-example"
  ##      consul:
  ##        address: "localhost"
  ##        scheme: "http"
  ##        token: ""
  ##        username: ""
  ##        password: ""
  ##        datacentre: ""
  ##      couchbase:
  ##        servers:
  ##          - "http://localhost:8091"
  ##      couchdb:
  ##        hosts:
  ##          - "http://localhost:8086/_stats"
  ##      disque:
  ##        servers:
  ##          - "localhost"
  ##      dns_query:
  ##        servers:
  ##          - "8.8.8.8"
  ##        domains:
  ##          - "."
  ##        record_type: "A"
  ##        port: 53
  ##        timeout: 2
  ##      dovecot:
  ##        servers:
  ##          - "localhost:24242"
  ##        type: "global"
  ##        filters:
  ##          - ""
  ##      elasticsearch:
  ##        servers:
  ##          - "http://localhost:9200"
  ##        http_timeout: "5s"
  ##        local: true
  ##        cluster_health: false
  ##        ssl_ca: "/etc/telegraf/ca.pem"
  ##        ssl_cert: "/etc/telegraf/cert.pem"
  ##        ssl_key: "/etc/telegraf/key.pem"
  ##        insecure_skip_verify: false
  ##      graylog:
  ##        servers:
  ##          - "http://[graylog-server-ip]:12900/system/metrics/multiple"
  ##        metrics:
  ##          - "jvm.cl.loaded"
  ##          - "jvm.memory.pools.Metaspace.committed"
  ##        username: ""
  ##        password: ""
  ##        ssl_ca: "/etc/telegraf/ca.pem"
  ##        ssl_cert: "/etc/telegraf/cert.pem"
  ##        ssl_key: "/etc/telegraf/key.pem"
  ##        insecure_skip_verify: false
  ##      haproxy:
  ##        servers:
  ##          - "http://myhaproxy.com:1936/haproxy?stats"
        influxdb:
          urls:
            - "http://influx-influxdb.tick:8086/debug/vars"
          timeout: "5s"
  ##      lustre2:
  ##        ost_procfiles:
  ##          - "/proc/fs/lustre/obdfilter/*/stats"
  ##          - "/proc/fs/lustre/osd-ldiskfs/*/stats"
  ##          - "/proc/fs/lustre/obdfilter/*/job_stats"
  ##        mds_procfiles:
  ##          - "/proc/fs/lustre/mdt/*/md_stats"
  ##          - "/proc/fs/lustre/mdt/*/job_stats"
  ##      mailchimp:
  ##        api_key: ""
  ##        days_old: 0
  ##        campaign_id: ""
  ##      memcached:
  ##        servers:
  ##          - "localhost:11211"
  ##        unix_sockets:
  ##          - "/var/run/memcached.sock"
  ##      mesos:
  ##        timeout: 100
  ##        masters:
  ##          - "localhost:5050"
  ##        master_collections:
  ##          - "resources"
  ##          - "master"
  ##          - "system"
  ##          - "agents"
  ##          - "frameworks"
  ##          - "tasks"
  ##          - "messages"
  ##          - "evqueue"
  ##          - "registrar"
  ##        slaves:
  ##          -
  ##        slave_collections:
  ##          - "resources"
  ##          - "agent"
  ##          - "system"
  ##          - "executors"
  ##          - "tasks"
  ##          - "messages"
  ##      mongodb:
  ##        servers:
  ##          - "mongodb://user:password@127.0.0.1:27017"
  ##        gather_perdb_stats: false
  ##      mysql:
  ##        servers:
  ##          - "tcp(127.0.0.1:3306)?tls=false"
  ##        perf_events_statements_digest_text_limit : 120
  ##        perf_events_statements_limit: 250
  ##        perf_events_statements_time_limit        : 86400
  ##        table_schema_databases: []
  ##        gather_table_schema: false
  ##        gather_process_list: true
  ##        gather_info_schema_auto_inc: true
  ##        gather_slave_status: true
  ##        gather_binary_logs: false
  ##        gather_table_io_waits: false
  ##        gather_table_lock_waits: false
  ##        gather_index_io_waits: false
  ##        gather_event_waits: false
  ##        gather_file_events_stats: false
  ##        gather_perf_events_statements: false
  ##        interval_slow: "30m"
  ##      net_response:
  ##        protocol: "tcp"
  ##        address: "github.com:80"
  ##        timeout: "1s"
  ##        send: "ssh"
  ##        expect: "ssh"
  ##        read_timeout: "1s"
  ##      nginx:
  ##        urls:
  ##          - "http://nginx.nginx-ingress/nginx_status"
  ##      nsq:
  ##        endpoints:
  ##          - "http://localhost:4151"
  ##      phpfpm:
  ##        urls:
  ##          - "http://localhost/status"
  ##      ping:
  ##        urls:
  ##          - "www.google.com"
  ##        count: 1
  ##        ping_interval: 1.0
  ##        timeout: 1.0
  ##        interface: ""
  ##      postgresql:
  ##        address: "postgres://user:password@localhost?sslmode=disable"
  ##        ignored_databases:
  ##          - "postgres"
  ##        databases:
  ##          - "app_production"
  ##          - "testing"
        prometheus:
          urls:
            - "https://kubernetes.default:443/metrics"
          name_prefix: "prom_"
          bearer_token: "/var/run/secrets/kubernetes.io/serviceaccount/token"
          insecure_skip_verify: true
  ##        ssl_ca: /path/to/cafile
  ##        ssl_cert: /path/to/certfile
  ##        ssl_key: /path/to/keyfile
  ##     rabbitmq:
  ##       url: "http://localhost:15672"
  ##       name: "rmq-server-1"
  ##       username: "guest"
  ##       password: "guest"
  ##       ssl_ca: "/etc/telegraf/ca.pem"
  ##       ssl_cert: "/etc/telegraf/cert.pem"
  ##       ssl_key: "/etc/telegraf/key.pem"
  ##       insecure_skip_verify: false
  ##       nodes:
  ##         - "rabbit@node1"
  ##         - "rabbit@node2"
  ##     raindrops:
  ##       urls:
  ##         - "http://localhost:8080/_raindrops"
  ##     redis:
  ##       servers:
  ##         - "tcp://localhost:6379"
  ##     rethinkdb:
  ##       servers:
  ##         - "127.0.0.1:28015"
  ##     riak:
  ##       servers:
  ##         - "http://localhost:8098"
  ##     sqlserver:
  ##       servers:
  ##         - "Server=192.168.1.10;Port=1433;User Id=<user>;Password=<pw>;app name=telegraf;log=1;"
  ##     twemproxy:
  ##       addr: "localhost:22222"
  ##        pools:
  ##          - "redis_pool"
  ##          - "mc_pool"
  ##      zookeeper:
  ##        servers:
  ##          - "localhost:2181"
  ##      http_listener:
  ##        service_address: ":8186"
  ##        read_timeout: "10s"
  ##        write_timeout: "10s"
  ##        max_body_size: 0
  ##        max_line_size: 0
  ##    statsd:
  ##      service_address: ":8125"
  ##      percentiles:
  ##        - 50
  ##        - 95
  ##        - 99
  ##      metric_separator: "_"
  ##      allowed_pending_messages: 10000
  ##      percentile_limit: 1000


############################################################################################

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi
